name: CI/CD - LixoZero

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  BDD_BASE_URL: http://localhost:5038

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore LixoZero.csproj

      - name: Clean
        run: dotnet clean

      - name: Build
        run: dotnet build LixoZero.csproj --configuration Release --no-restore

      - name: Tests (se existir /tests)
        shell: bash
        run: |
          shopt -s nullglob
          files=(tests/*.csproj)
          if [ ${#files[@]} -gt 0 ]; then
            dotnet test tests/*.csproj -c Release --logger "trx;LogFileName=unit.trx"
          else
            echo "Sem projeto de testes em /tests - pulando unit."
          fi

      - name: Upload TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/*.trx"

      - name: Publish
        run: dotnet publish LixoZero.csproj -c Release -o ./out --no-build

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: LixoZero-Build
          path: ./out

  specs:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Versões (diag)
        run: |
          docker version
          docker compose version
          ls -la
          test -f docker-compose.yml && echo "compose encontrado" || (echo "ERRO: docker-compose.yml NAO encontrado na raiz"; exit 1)

      - name: Validar Compose e Build
        run: |
          docker compose config
          docker compose build --no-cache

      - name: Subir API (Docker Compose)
        run: |
          docker compose up -d
          echo "== docker compose ps =="
          docker compose ps
          echo "== aguardando Swagger 200 (até 120s) =="

          # tenta o JSON primeiro (elimina cache do UI)
          for i in {1..60}; do
            CODE=$(curl -fsS -o /dev/null -w "%{http_code}" http://localhost:5038/swagger/v1/swagger.json || true)
            if [ "$CODE" = "200" ]; then
              echo "API OK (200 em /swagger/v1/swagger.json)"; break; fi
            sleep 2
          done

          if [ "$CODE" != "200" ]; then
            echo "Falhou JSON: status=$CODE"
            echo "== docker compose logs (api) =="
            docker compose logs api || true
            exit 1
          fi

          # opcional: confere a UI também
          CODE_UI=$(curl -fsS -o /dev/null -w "%{http_code}" http://localhost:5038/swagger/index.html || true)
          echo "Swagger UI status: $CODE_UI"

      - name: Rodar BDD (SpecFlow)
        run: dotnet test LixoZero.Specs/LixoZero.Specs.csproj -c Release --logger "trx;LogFileName=bdd.trx"

      - name: Upload BDD TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bdd-results
          path: LixoZero.Specs/**/TestResults/**/*.trx

      - name: Derrubar API
        if: always()
        run: docker compose down -v


  package-image:
    needs: [build, specs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          IMAGE="lixozero:${{ github.sha }}"
          docker build -t "$IMAGE" -f Dockerfile .
          docker save "$IMAGE" -o docker-image.tar

      - name: Upload Docker image (artefato)
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar

  deploy-staging-ci:
    needs: package-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Subir STAGING (limpa container, sobe e checa swagger.json)
        run: |
          # limpa container anterior (se existir)
          docker rm -f lixozero-stg || true

          docker load -i docker-image.tar
          IMG=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep lixozero | head -n1)

          docker run -d --name lixozero-stg -p 5038:8080 \
            -e ASPNETCORE_URLS=http://+:8080 \
            -e ASPNETCORE_ENVIRONMENT=Staging \
            -e ENABLE_SWAGGER=true \
            -e DISABLE_HTTPS_REDIRECT=true \
            "$IMG"

          echo "== aguardando 200 em /swagger/v1/swagger.json (até 120s) =="
          for i in {1..60}; do
            CODE=$(curl -fsS -o /dev/null -w "%{http_code}" http://localhost:5038/swagger/v1/swagger.json || true)
            echo "tentativa $i: $CODE"
            if [ "$CODE" = "200" ]; then
              echo "STAGING OK (200 em swagger.json)"; exit 0; fi
            sleep 2
          done

          echo "STAGING falhou: swagger.json não respondeu 200 a tempo"
          echo "== docker logs (stg) =="
          docker logs lixozero-stg || true
          echo "== headers da UI (index.html) =="
          curl -ILs http://localhost:5038/swagger/index.html || true
          exit 1

      - name: Encerrar STAGING
        if: always()
        run: docker rm -f lixozero-stg || true

  deploy-prod-ci:
    needs: deploy-staging-ci
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Subir PRODUÇÃO (limpa container, sobe e checa swagger.json)
        run: |
          # limpa container anterior (se existir)
          docker rm -f lixozero-prd || true

          docker load -i docker-image.tar
          IMG=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep lixozero | head -n1)

          docker run -d --name lixozero-prd -p 5080:8080 \
            -e ASPNETCORE_URLS=http://+:8080 \
            -e ASPNETCORE_ENVIRONMENT=Production \
            -e ENABLE_SWAGGER=true \
            -e DISABLE_HTTPS_REDIRECT=true \
            "$IMG"

          echo "== aguardando 200 em /swagger/v1/swagger.json (até 120s) =="
          for i in {1..60}; do
            CODE=$(curl -fsS -o /dev/null -w "%{http_code}" http://localhost:5080/swagger/v1/swagger.json || true)
            echo "tentativa $i: $CODE"
            if [ "$CODE" = "200" ]; then
              echo "PRODUÇÃO OK (200 em swagger.json)"; exit 0; fi
            sleep 2
          done

          echo "PRODUÇÃO falhou: swagger.json não respondeu 200 a tempo"
          echo "== docker logs (prd) =="
          docker logs lixozero-prd || true
          echo "== headers da UI (index.html) =="
          curl -ILs http://localhost:5080/swagger/index.html || true
          exit 1

      - name: Encerrar PRODUÇÃO
        if: always()
        run: docker rm -f lixozero-prd || true
